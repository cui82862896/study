课程简介：	四章 共计16个小节
	
	第 1 章 基础
		1.1 为什么学？	
		1.2 简介	
	第 2 章 快速入门	
		2.1 入门案例
		2.2 算法复杂度
		2.3 性能分析模型详解	
	第 3 章 数据结构 进阶
		3.1 线性表	
		3.2 顺序表
		3.3 单向链表
		3.4 双向链表
		3.5 单向循环链表
		3.6 栈	
		3.7 队列
		3.8 树
	第 4 章 算法 进阶
		4.1 排序
		4.2 搜索
		4.3 二叉树

	第一天：1.1-3.2
	第二天：3.3-3.7
	第三天：3.8-4.1
	第四天：4.1-4.3
		
		
第 1 章 基础	
	1.1 为什么学？
	1.2 简介
		什么是数据结构
			存储、组织数据的方式
		数据结构形式：	
			物理+逻辑
			
		算法是什么？
			方法+思路
		算法复杂度：
			时间复杂度：代码执行的时间
			空间复杂度：代码运行的空间
			
		两者关系：
			数据结构+算法=程序
			两者是一体的
		
		抽象数据类型：
			数据+动作
			目的：
				简化
				
第 2 章 快速入门
	2.1 入门案例	
		2.1.1 解决方法一
			代码：
				# 随便猜：
				for a in range(1001):
					for b in range(1001):
						for c in range(1001):
							if a + b + c == 1000 and a**2 + b**2 == c**2:
								print("a,b,c: %d,%d,%d" % (a,b,c))		
			算法特性：
				量入出题题能解，行有意步步可为
				
		2.1.2 解决方法二
			# 随便猜二：
			for a in range(1001):
				for b in range(1001):
					c = 1000 - a - b
					if  a ** 2 + b ** 2 == c ** 2:
							print("a,b,c: %d,%d,%d" % (a, b, c))
		2.1.3 方法思考	
			算法的评判标准：
				步骤数量+单位时间
				关系：
					步骤数量*单位时间 = 代码运行时间
					关键点：	
						步骤数量
		2.1.4 步骤数量	
	2.2 算法复杂度	
		2.2.1 时间复杂度
			什么是时间复杂度？
				做一件事情需要花费多少时间
				全称：渐近时间复杂度
				特点：
					大O记法、规律趋势
		2.2.2 时间复杂度分类
					最优： 梦想
					最坏： 最低保证
					平均： 仅供参考		
					
		2.2.3 基本计算规则	
			1、基本操作	O(1)
				特点：一步到位    在某个具体数值范围内容，
			2、顺序结构 O(n)
				特点：没有具体数值
			3、循环结构
				简单循环：O(n3)
					特点：乘方
				递归循环：O(logn)
			4、分支结构：	
				特点：最坏时间复杂度
			5、抓主干
			6、最坏时间复杂度
			
		2.2.4 空间复杂度
			目的：	
				空间换时间
				
		2.2.5 算法复杂度实践
		2.2.6 常见时间复杂度
			O(1) < O(logn) < O(n) < O(nlogn) < O(n2) < O(n3) < O(2n) < O(n!) < O(nn)
				简单来说：数字最小，n越多，值越大，效率越低
	2.3 性能分析模型详解
		2.3.1 timeit模块简介
			场景：
				用来测试一小段Python代码的执行速度
			使用方法：
				1、生成测试对象
					timer1 = timeit.Timer("T1()","from __main__ import T1")
				2、测试效果(平均执行时间)
					timer1.timeit(1000)
					
		2.3.2 列表性能测试实践
			代码：
				import timeit

				# 内置属性
				def T1():
					li = []
					for i in range(1000):
						li.append(i)

				# 列表拼接
				def T2():
					li = []
					for i in range(1000):
						li = li + [i]

				# 列表推导
				def T3():
					li = [i for i in range(1000)]

				# 属性转换
				def T4():
					li = list(range(1000))

				if __name__ == '__main__':
					timeit1 = timeit.Timer("T1()","from __main__ import T1")
					cost1 = timeit1.timeit(1000)
					print("内置属性: %f" % (cost1))

					timeit2 = timeit.Timer("T2()","from __main__ import T2")
					cost2 = timeit2.timeit(1000)
					print("列表拼接: %f" % (cost2))

					timeit3 = timeit.Timer("T3()","from __main__ import T3")
					cost3 = timeit3.timeit(1000)
					print("列表推导: %f" % (cost3))

					timeit4 = timeit.Timer("T4()","from __main__ import T4")
					cost4 = timeit4.timeit(1000)
					print("属性转换: %f" % (cost4))			
第 3 章 数据结构 进阶
	3.1 线性表
		3.1.1 线性表简介
			什么是线性表？
				数据  顺序  线
			线性表分类：
				顺序表：
					特点： 同类型数据  连续存储区
				链表：
					特点： 非同类型数据  不连续存储区
					分类：
						单 双 单循环
	3.2 顺序表
		3.2.1 顺序表形式
			基本布局		同类型数据
			元素外置	同类型数据(逻辑地址)   不同类型数据
		3.2.2 顺序表结构
			顺序表结构
				基本信息：空间大小+元素个数
				存储空间
				特点：
					存储空间对象一旦确定永远不能变
			结构分类：
				一体式：基本信息和存储空间 在一个连续存储区域
					特点：
						因为整体，方便管理，但可能造成浪费
				分离式：基本信息+存储空间的逻辑地址  	存储空间
					特点：
						灵活
					
		3.2.3 顺序表实践
			改：
				容量扩充：
					线性：扩充频率高，空间利用率高，
					倍增：扩充频率低，空间利用率低
						工作推荐：倍增
						
		3.2.4 顺序表常见操作
			增加：
				头：	保序、O(n)		
				尾：	保序、O(1)
				位置：	非保序、O(1)
			删除：
				头：	保序、O(n)	
				尾：	保序、O(1)
				位置：	非保序、O(1)
	3.3 单向链表	
		3.3.1 单向链表简介	
			单向链表是什么
				基本元素：结点
				结点属性：内容+下一元素地址
				多个结点连成串
			
			常用术语：
				链表角度：结点、头结点、尾结点
				结点角度：前结点、后结点
				
			单向链表特性：
				只要找到头结点，那么整个链表就能找全
				尾结点中的“下一地址”内容为空(None)
				保存单向链表，只需要保存头结点地址即可
			
			场景：
				灵活，最大限度利用存储空间
				
		3.3.2 python 链表解析
			等号 就是 改变next属性值为下一个对象的地址操作
		3.3.3 实践 之 基本属性
			结点基本属性：
				代码：
					class BaseNode(object):
						# 结点基本属性
						def __init__(self,item):
							self.item = item
							self.next = None				
		3.3.4 实践 之 操作分析
			单向链表的基本属性：
				代码：
					class SingleLinkList(object):
						# 链表基本属性：自动获取当前链表头结点信息
						def __init__(self,node=None):
							self.__head = node		
							
		3.3.5 实践 之 查看
			判空：
				代码：
					#  单向链表是否为空
					def is_empty(self):
						return self.__head is None
				关键点：
					1、思路：活用单向链表的特性3
			长度：
				代码：
					# 单向链表长度
					def length(self):
						# 准备工作： 标签
						cur = self.__head
						# 链表为空
						if self.is_empty():
							return 0
						# 链表不为空
						else:
							# 准备工作
							count = 0
							while cur is not None:
								count += 1
								cur = cur.next
							# 返回结果
							return count
				关键点：
					1、场景分析
					2、遍历条件：单向链表的特性2
					
			内容：
				代码：
					# 单向链表内容
					def travel(self):
						# 准备工作： 标签
						cur = self.__head
						# 链表为空
						if self.is_empty():
							print("")
						# 链表不为空
						else:
							while cur is not None:
								print(cur.item,end=" ")
								cur = cur.next
							print("")				
				关键点：
					1、遍历条件
					2、格式化输出
					
			搜索：
				代码：
					# 单向链表搜索内容
					def search(self,item):
						# 准备工作： 标签
						cur = self.__head
						# 链表为空
						if self.is_empty():
							return False
						# 链表不为空
						else:
							# 正常搜索
							while cur is not None:
								if cur.item == item:
									return True
								cur = cur.next
							# 异常情况
							return False	
				关键点：
					1、遍历条件
					2、异常

		3.3.6 实践 之 增加	
			头部增加：
				代码：
					# 单向链表头部增加内容
					def add(self,item):
						#  实例化新结点
						node = BaseNode(item)
						#  属性修改
						node.next = self.__head
						self.__head = node
				关键点：
					1、步骤
					2、属性修改
					
			尾部增加
				代码：
					# 单向链表尾部增加Neri
					def append(self,item):
						# 实例化新结点
						node = BaseNode(item)
						#  链表为空
						if self.is_empty():
							self.__head = node
						else:
							# 找尾结点
							cur = self.__head
							while cur.next is not None:
								cur = cur.next
							# 属性修改
							cur.next = node		
				关键点：
					1、步骤
					2、遍历条件：单向链表的特性2
					3、相应属性修改
					
			指定位置增加
				代码：
					# 单向链表指定位置增加
					def insert(self,pos,item):
						# 实例化新结点
						node = BaseNode(item)
						#  调用老方法在头尾增加
						if pos <= 0:
							self.add(item)
						elif pos >= self.length():
							self.append(item)
						# 中间位置增加
						else:
							# 准备工作：标签+计数器
							cur = self.__head
							count = 0
							while count < (pos-1):
								count += 1
								cur = cur.next
							# 属性修改
							node.next = cur.next
							cur.next = node		
				关键点：
					1、步骤
					2、省事
					3、单向链表的特性
		3.3.7 实践 之 删除	
			代码：
				# 单向链表删除内容
				def remove(self,item):
					# 准备工作：cur pre
					cur = self.__head
					pre = None
					# 空链表
					if self.is_empty():
						return False

					# 删除流程： 空-匹配-位置
					while cur is not None:
						if cur.item == item:
							# 头结点：
							if cur == self.__head:
								self.__head = cur.next
							# 其他位置
							else:
								pre.next = cur.next
							return 
						#  异常情况
						pre = cur
						cur = cur.next	
			关键点：
				1、步骤
				2、位置判断
				3、属性修改
				4、异常
				
		3.3.8 链表 VS 顺序表
			成本上：
				链表与顺序表的各种操作复杂度如下所示：
					操作		链表	顺序表
				访问元素		O(n)	O(1)
				在头部插入/删除	O(1)	O(n)
				在尾部插入/删除	O(n)	O(1)
				在中间插入/删除	O(n)	O(n)
	3.4 双向链表	
		3.4.1 双向链表简介	
			本质：单向链表
			特点：双方向
				特殊属性：
					头结点，pre = None
					尾结点，next = None
				
		3.4.2 实践 之 基本属性
				class BaseNode(object):
					# 结点基本属性
					def __init__(self,item):
						self.pre = None
						self.item = item
						self.next = None		
		3.4.3 实践 之 操作分析
			class SingleLinkList(object):
				# 链表基本属性：自动获取当前链表头结点信息
				def __init__(self,node=None):
					self.__head = node		
		3.4.4 实践 之 增加	
			头部增加：
				代码：
					#  双向链表头部增加内容
					def add(self,item):
						#  实例化新结点
						node = BaseNode(item)
						# 属性修改
						node.next = self.__head
						self.__head = node
						# 链表不为空
						if node.next:
							node.next.pre = node	
				关键点：
					1、步骤
					2、属性修改
					3、异常情况
					
			尾部增加：
				代码：
					# 双向链表尾部增加内容
					def append(self,item):
						#  实例化新结点
						node = BaseNode(item)
						# 链表为空
						if self.is_empty():
							self.__head = node
						# 链表不为空
						else:
							cur = self.__head
							while cur.next is not None:
								cur = cur.next
							# 修改属性
							cur.next = node
							node.pre = cur		
				关键：
					1、步骤
					2、属性修改
					3、异常情况				
			指定位置增加
				代码：
					# 双向链表指定位置增加
					def insert(self,pos,item):
						# 实例化新结点
						node = BaseNode(item)
						#  调用老方法在头尾增加
						if pos <= 0:
							self.add(item)
						elif pos >= self.length():
							self.append(item)
						# 中间位置增加
						else:
							# 准备工作：标签+计数器
							cur = self.__head
							count = 0
							while count < (pos):
								count += 1
								cur = cur.next
							# 属性修改
							node.pre = cur.pre
							cur.pre.next = node
							cur.pre = node
							node.next = cur	
				关键点：
					1、步骤
					2、活用老方法
					3、双向链表的特性：前后均可查找	
					4、属性修改				
		3.4.5 实践 之 删除	
			代码：
			   # 双向链表删除元素
				def remove(self,item):
					# 空链表情况
					if self.is_empty():
						return False
					# 不空，准备工作 ： cur
					cur = self.__head
					while cur is not None:
						if cur.item == item:
							# 头部结点删除
							if cur == self.__head:
								self.__head = cur.next
								if cur.next:
									cur.next.pre = None
							# 其他删除
							else:
								cur.pre.next = None
								if cur.next:
									cur.next.pre = cur.pre
									cur.pre.next = cur.next
							return
						# 异常情况：一下子找不到，需要找
						else:
							cur = cur.next
			关键点：
				1、步骤
				2、位置
				3、异常
				4、属性修改

	3.5 单向循环链表	
		3.5.1 单向循环链表简介
		3.5.2 实践 之 基本属性
		3.5.3 实践 之 操作分析
		3.5.4 实践 之 查看
			判空：
				代码：
					# 单向循环链表是否为空
					def is_empty(self):
						return  self.__head is None
				关键点：	
					头结点信息判断
			长度：
				代码：
					# 单向循环链表长度
					def length(self):
						# 空
						if self.is_empty():
							print("")
							return 0
						# 非空: 准备工作： 标签+计数器
						cur = self.__head
						count = 1
						# 找尾结点，退出循环cur在尾结点上
						while cur.next is not self.__head:
							count += 1
							cur = cur.next
						return count
				关键点：
					1、遍历条件 
						退出循环cur在尾结点上
			内容：
				代码
					# 单向循环链表内容
					def travel(self):
						# 空
						if self.is_empty():
							return True
						# 非空: 准备工作： 标签
						cur = self.__head
						# 找尾结点，退出循环cur在尾结点上
						while cur.next is not self.__head:
							print(cur.item,end=" ")
							cur = cur.next
						# 尾结点信息输出
						print(cur.item)
				关键点：
					1、遍历条件
					
			搜索：
				代码：
					# 单向循环链表搜索内容
					def search(self,item):
						# 空
						if self.is_empty():
							return False
						# 非空: 准备工作： 标签
						cur = self.__head
						# 找尾结点，退出循环cur在尾结点上
						while cur.next is not self.__head:
							if cur.item == item:
								return True
							cur = cur.next
						#  对尾结点进行处理
						if cur.item == item:
							return True
						# 异常情况
						return False
				关键点：
					1、遍历条件
		3.5.5 实践 之 增加
			头部增加内容：
				代码：
					# 单向循环链表头部增加内容
					def add(self,item):
						#  实例化新结点
						node = BaseNode(item)
						# 链表为空
						if self.is_empty():
							self.__head = node
							node.next = self.__head
						# 链表不为空
						else:
							cur = self.__head
							while cur.next is not self.__head:
								cur = cur.next
							# 尾结点处理
							cur.next = node
							node.next = self.__head
							self.__head = node
				关键点：
					1、步骤
					2、先找尾结点，在修改头结点的属性
				
			尾部增加：
				代码：
					# 单向循环链表尾部增加内容
					def append(self,item):
						#  实例化新结点
						node = BaseNode(item)
						# 链表为空
						if self.is_empty():
							self.__head = node
							node.next = self.__head
						# 链表不为空
						cur = self.__head
						while cur.next is not self.__head:
							cur = cur.next
						# 属性修改
						cur.next = node
						node.next = self.__head
				关键点：
					1、步骤
					2、遍历找尾结点
					
			指定位置增加：
				代码：
					# 单向循环链表指定位置增加
					def insert(self,pos,item):
						# 实例化新结点
						node = BaseNode(item)
						#  调用老方法在头尾增加
						if pos <= 0:
							self.add(item)
						elif pos >= self.length():
							self.append(item)
						# 中间位置增加
						else:
							# 准备工作：标签+计数器
							cur = self.__head
							count = 0
							while count < (pos-1):
								count += 1
								cur = cur.next
							# 属性修改
							node.next = cur.next
							cur.next = node				
		3.5.6 实践 之 删除
			删除代码：
				# 单向循环链表删除内容
				def remove(self,item):
					#  链表为空
					if self.is_empty():
						return
					# 链表不为空，走正常删除程序，准备：cur pre
					else:
						cur = self.__head
						pre = None
						# 非尾结点范围
						while cur.next is not self.__head:
							if cur.item == item:
								# 删除头结点
								if cur == self.__head:
									# 修改属性前，先找尾结点
									tnode = self.__head
									while tnode.next is not self.__head:
										tnode = tnode.next
									# 修改属性
									self.__head = cur.next
									tnode.next = self.__head
								# 中间位置删除内容
								else:
									pre.next = cur.next
								return
							# 要找的内容不匹配，就移动标签
							else:
								pre = cur
								cur = cur.next
						# 尾结点进行判断
						if cur.item == item:
							# 链表只有一个元素
							if cur == self.__head:
								self.__head = None
							else:
								pre.next = self.__head
						return False
			关键点：
				1、链表为空
					直接返回
				2、链表不为空
					1、非尾结点范围
						0、顺序
						1、头结点
							先找尾结点，再修改头结点的属性
						2、中间节点
							pre.next = cur.next
						3、异常情况
							移动标签
					2、尾结点判断
						1、单节点链表
							self.__head = None
						2、多结点链表
							pre.next = self.__head
						3、异常情况
				
				
	3.6  栈(简单)	
		3.6.1 栈的简介	
			栈概念:
				后进先出\先进后出
				
		3.6.2 栈的实践	
	3.7 队列(简单)	
		3.7.1 队列简介	
			单向队列：
				后进后出\先进先出
		3.7.2 队列的实践	
		3.7.3 双端队列(了解)
			双端队列
				两个(反方向)栈/队列的组合
	3.8 树	
		3.8.1 树简介
			基本概念
				数据结构
				基本单位是节点
				前后+层次
				
			特点：
				每个节点有零个或多个子节点；
				没有父节点的节点称为根节点；
				每一个非根节点有且只有一个父节点；
			
			基本术语：
				结点角度： 父、子、兄弟、叶子、度
				整体角度：祖先、树高度、树的度
				
			树的种类
				有序+无序
				
			树的存储
				顺序存储
					从上到下、从左到右
					结点间关系
						父节点位置 i,找子节点：
							左子节点位置：2i + 1	右子节点位置：2i + 2
						左子节点位置 i，找父节点：
							父节点位置：(i-1)/2
						右子节点位置i，找父节点：
							父节点位置：(i-2)/2	
				链式存储
					参考双向链表
					
		3.8.2 二叉树简介
			简介
				树的一种 ，节点最多有两个子树的树结构
			特性：
				起始根节点编号为0：
					编号为i的结点，其左节点 2i+1，右节点 2i＋2,其父节点的编号(i-1)/2或(i-2)/2
			种类：
				完美：儿女双全
				完全：最后一层不全，左对齐
				完满：非叶子结点，都有2子节点
		3.8.3 二叉树实践
			代码：
				#  结点的增加
				def add(self,item):
					#实例化节点
					node = BaseNode(item)
					# 空树
					if self.root == None:
						self.root = node
					# 非空树
					else:
						# 准备工作：前后顺序的辅助工具：队列列表
						queue = []
						queue.append(self.root)
						while queue:
							# 确定待处理的节点
							cur = queue.pop(0)
							# 先左后右
							if cur.lsub == None:
								cur.lsub = node
								return
							queue.append(cur.lsub)
							
							if cur.rsub == None:
								cur.rsub = node
								return
							queue.append(cur.rsub)
			关键点：
				1、顺序： 根-左-右
				2、顺序的辅助工具： 队列列表
				
				
第 4 章 算法 进阶
	4.1 排序
			什么是排序？
				把无序的队列变成有序的队列
			特点：
				入无序，出有序
				
		4.1.1 排序算法简介
			排序算法简介
				把无序的队列变成有序的队列，过程中的思路
			特点：
				入无序：慢变空
				出有序：空变满
			稳定性：
				队列中有相同的元素，排序前后，这两个相同元素的顺序有没有发生变化
				变则不稳，不变则稳
			常见排序算法：
				基础：	冒泡、插入、选择				中级：	快速
				高级：	堆、归并						其他：	基数、希尔、桶	
				
		4.1.2 冒泡排序
			冒泡排序原理
				1、元素(相邻)替换
				2、内部比较循环
				3、外部的冒泡循环
				4、过程跟踪
				
			代码实践：
				代码：
					def maopao(alist):
						n = len(alist)
						# 外部冒泡循环
						for j in range(n-1,0,-1):
							# 异常准备工作： 计数器
							count = 0
							# 内部比较循环
							for i in range(n-1):
								# 内部元素替换
								if alist[i] > alist[i+1]:
									alist[i],alist[i+1] = alist[i+1],alist[i]
									count += 1
							# 异常处理
							if count == 0:
								return	
				关键点：
					1、流程：替换-比较-外循环-异常处理
					2、过程跟踪
					
			算法分析：
				最优：O(n)
				最坏：O(n*n)
				稳定性：稳定
			拓展：
				
					
		4.1.3 选择排序
			原理：
				1、无序选最小
				2、无序最小和无序第一进行替换
				3、选择循环
				4、异常情况：
					
			代码实践：
				代码：
					def xuanze(alist):
						n = len(alist)
						# 外部循环
						for j in range(n-1):
							# 选最小准备工作：cur mix
							min_index = j
							for i in range(min_index+1,n):
								if alist[min_index] > alist[i]:
									min_index = i

							#  无序队列中最小和第一进行替换
							if min_index != j:
								alist[j],alist[min_index] = alist[min_index],alist[j]	
				关键点：	
					1、步骤： 选最小--替换--外部循环
					2、异常替换的条件
					
			算法分析：
				最优：O(n*n)
				最坏：O(n*n)
				稳定性：稳定(看情况)
			拓展：
				
		4.1.4 插入排序
			原理：
				1、构建有序
				2、内部冒泡: 元素替换+比较循环
				3、插入循环
			代码实践：
				代码：
					def insert_sort(alist):
						# 外部插入循环
						n = len(alist)
						for i in range(n):
							#  内部冒泡比较循环
							for j in range(i,0,-1):
								# 内部元素替换：
								if alist[j] < alist[j-1]:
									alist[j],alist[j-1] = alist[j-1],alist[j]
								else:
									break		
				关键点：	
					1、步骤： 元素替换--比较循环--外部循环
					2、异常替换的条件
					
			算法分析：
				最优: O(n)
				最坏：O(n*n)
				稳定性：稳定
				
			拓展：
				
		4.1.5 希尔排序
			原理：
				1、分组-插入-合并-递归循环
			流程
				1、分组后进行元素替换
				2、一次希尔需要同时进行几组插入排序
				3、需要进行几次希尔
				
			代码实践：
				代码：
					def xier(alist):
						#  准备工作：长度+偏移量
						n = len(alist)
						gap = n // 2
						# 外部的递归循环
						while gap >= 1:
							# 单次希尔需要进行多少个组内排序
							for i in range(gap,n):
								 # 分组后组内插入排序
								 while (i-gap) >= 0:
									if alist[i] < alist[i-gap]:
										alist[i],alist[i-gap] = alist[i-gap],alist[i]
										# 过程跟踪
										i = i - gap
									else:
										break
							#  递归的动作
							gap = gap // 2	
				关键点：
					1、流程：分组插入-合并-递归循环
					2、过程跟踪
					
					
			算法分析：
				最优： O(nlogn) ~ O(n*n)
				最坏：	O(n*n)
				稳定性：不稳定
					
		4.1.6 快速排序
		4.1.7 归并排序
		4.1.8 堆排序	
		4.1.9 排序总结
	4.2 搜索	
		4.2.1 搜索简介
		4.2.2 二分查找
		4.2.3 递归二分实践	
		4.2.4 普通二分实践	
	4.3 二叉树
		4.3.1 二叉树遍历	
		4.3.2 查询实践(广度优先)
		4.3.3 查询实践(深度优先)
		4.3.4 二叉树反推(拓展)	